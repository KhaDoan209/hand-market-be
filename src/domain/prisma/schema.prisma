generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Address {
  id       Int     @id @default(autoincrement())
  street   String? @db.VarChar(100)
  district String? @db.VarChar(100)
  ward     String? @db.VarChar(100)
  province String? @db.VarChar(100)
  user_id  Int     @unique(map: "user_id_UNIQUE")
  User     User    @relation(fields: [user_id], references: [id], onDelete: Cascade, map: "address_ibfk_1")
  Order    Order[]

  @@index([user_id], map: "user_id_idx")
}

model Blog {
  id           Int            @id @default(autoincrement())
  title        String?        @db.VarChar(255)
  content      String?
  image        String?
  create_at    DateTime?      @db.Timestamp(0)
  created_by   String?        @db.VarChar(100)
  is_verified  Boolean?
  user_id      Int?
  User         User?          @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "blog_ibfk_1")
  Feedback     Feedback[]
  Notification Notification[]

  @@index([user_id], map: "blog_ibfk_1_idx")
}

model Cart {
  id            Int       @id(map: "cart_pkey") @default(autoincrement())
  product_id    Int?
  user_id       Int
  item_quantity Int?
  created_at    DateTime? @db.Timestamp(0)
  Product       Product?  @relation(fields: [product_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "cart_ibfk_1")
  User          User      @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "cart_ibfk_2")
}

model Category {
  id          Int       @id @unique(map: "myCategoryIdUniqueConstraint") @default(autoincrement())
  name        String?   @db.VarChar(45)
  image       String?
  created_at  DateTime? @db.Timestamp(0)
  created_by  String?   @db.VarChar(100)
  description String?
  Product     Product[]
}

model CreditCard {
  id               Int       @id @unique(map: "myCreditCardIdUniqueConstraint") @default(autoincrement())
  card_holder_name String?   @db.VarChar(100)
  card_number      String?   @db.VarChar(30)
  expired_date     DateTime? @db.Date
  cvc_cvv          String?   @db.VarChar(5)
  user_id          Int?
  User             User?     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "credit_card_ibfk_1")
  Order            Order[]

  @@index([user_id], map: "credicard_ibfk_1_idx")
}

model Discount {
  id         Int       @id @unique(map: "myDiscountIdUniqueConstraint") @default(autoincrement())
  percentage Decimal?  @db.Decimal(10, 2)
  Product    Product[]
}

model Feedback {
  id         Int        @id @default(autoincrement())
  date       DateTime?  @db.Timestamp(0)
  content    String?
  product_id Int?
  user_id    Int?
  blog_id    Int?
  Product    Product?   @relation(fields: [product_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "feedback_ibfk_1")
  User       User?      @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "feedback_ibfk_2")
  Blog       Blog?      @relation(fields: [blog_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "feedback_ibfk_3")
  Reaction   Reaction[]

  @@index([product_id], map: "feedback_ibfk_1_idx")
  @@index([user_id], map: "feedback_ibfk_2_idx")
  @@index([blog_id], map: "feedback_ibfk_3_idx")
}

model Notification {
  id       Int     @id @default(autoincrement())
  user_id  Int?
  order_id Int?
  blog_id  Int?
  content  String?
  User     User?   @relation(fields: [user_id], references: [id], onDelete: Cascade, map: "noti_ibfk_1")
  Order    Order?  @relation(fields: [order_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "noti_ibfk_2")
  Blog     Blog?   @relation(fields: [blog_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "noti_ibfk_3")

  @@index([user_id], map: "noti_ibfk_1_idx")
  @@index([order_id], map: "noti_ibfk_1_idx1")
  @@index([blog_id], map: "noti_ibfk_3_idx")
}

model Order {
  id             Int            @id @default(autoincrement())
  order_date     DateTime?      @db.Timestamp(0)
  status         String?        @db.VarChar(45)
  payment_status String?        @db.VarChar(45)
  order_total    Decimal?       @db.Decimal(10, 0)
  discount_total Decimal?       @db.Decimal(10, 0)
  address_id     Int?
  credit_id      Int?
  user_id        Int?
  Notification   Notification[]
  Address        Address?       @relation(fields: [address_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "order_ibfk_1")
  CreditCard     CreditCard?    @relation(fields: [credit_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "order_ibfk_2")
  User           User?          @relation(fields: [user_id], references: [id], map: "order_ibfk_3")
  OrderDetail    OrderDetail[]

  @@index([address_id], map: "address_idx")
  @@index([credit_id], map: "credit_idx")
  @@index([user_id], map: "user_idx")
}

model OrderDetail {
  order_id   Int
  product_id Int
  is_deleted Int?     @db.SmallInt
  quantity   Int?
  price      Decimal? @db.Decimal(10, 0)
  Order      Order    @relation(fields: [order_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "order_detail_ibfk_1")
  Product    Product  @relation(fields: [product_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "order_detail_ibfk_2")

  @@id([order_id, product_id])
  @@index([product_id], map: "product_idx")
}

model Product {
  id          Int           @id @unique(map: "myProducttIdUniqueConstraint") @default(autoincrement())
  name        String?       @db.VarChar(200)
  image       String?
  price       Decimal?      @default(0.00) @db.Decimal(10, 2)
  description String?
  in_stock    Boolean?      @default(true)
  type        String?       @db.VarChar(45)
  stars       Int?          @default(0)
  brand       String?       @db.VarChar(100)
  purchase    Int?          @default(0)
  views       Int?          @default(0)
  created_at  DateTime?     @db.Timestamp(0)
  is_deleted  Boolean?      @default(false)
  quantity    Int?          @default(0)
  category_id Int
  discount_id Int?
  Cart        Cart[]
  Feedback    Feedback[]
  OrderDetail OrderDetail[]
  Category    Category      @relation(fields: [category_id], references: [id], onDelete: Cascade, map: "product_ibfk_1")
  Discount    Discount?     @relation(fields: [discount_id], references: [id], onDelete: Cascade, map: "product_ibfk_2")
  Rate        Rate[]

  @@index([category_id], map: "category_id_idx")
  @@index([discount_id], map: "discount_id_idx")
}

model Reaction {
  id            Int       @id @default(autoincrement())
  reaction_type String?   @db.VarChar(45)
  user_id       Int?
  feedback_id   Int?
  User          User?     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "reaction_ibfk_1")
  Feedback      Feedback? @relation(fields: [feedback_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "reaction_ibfk_2")

  @@index([user_id], map: "reaction_ibfk_1_idx")
  @@index([feedback_id], map: "reaction_ibfk_2_idx")
}

model User {
  id            Int            @id @unique(map: "id_UNIQUE") @default(autoincrement())
  first_name    String?        @db.VarChar(50)
  last_name     String?        @db.VarChar(50)
  email         String?        @unique(map: "email_UNIQUE") @db.VarChar(100)
  password      String?
  role          String?        @db.VarChar(20)
  is_locked     Boolean?       @default(false)
  is_banned     Boolean?       @default(false)
  refresh_token String?
  avatar        String?
  is_deleted    Boolean?       @default(false)
  phone         String?        @db.VarChar(20)
  Address       Address?
  Blog          Blog[]
  Cart          Cart[]
  CreditCard    CreditCard[]
  Feedback      Feedback[]
  Notification  Notification[]
  Order         Order[]
  Rate          Rate[]
  Reaction      Reaction[]
}

model Rate {
  id         Int       @id @default(autoincrement())
  user_id    Int
  product_id Int
  star       Int
  created_at DateTime? @db.Timestamp(0)
  User       User      @relation(fields: [user_id], references: [id], onDelete: Cascade, map: "rate_ibfk_1")
  Product    Product   @relation(fields: [product_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "rate_ibfk_2")

  @@index([user_id], map: "rate_ibfk_1_idx")
  @@index([product_id], map: "rate_ibfk_2_idx")
}
